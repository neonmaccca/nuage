/*
 *  Nuage - Framework for Nodejs
 *
 *  Copyright (c) 2011 Stephan Bruny
 *
 *  This software is provided 'as-is', without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it freely,
 *  subject to the following restrictions:
 *
 *      The origin of this software must not be misrepresented;
 *      you must not claim that you wrote the original software.
 *      If you use this software in a product,
 *      an acknowledgment in the product documentation would be appreciated but is not required.
 *      Altered source versions must be plainly marked as such,
 *      and must not be misrepresented as being the original software.
 *      This notice may not be removed or altered from any source distribution.
 *
 */

/*
 * Routing handler
 */
var routing = require('./libs/routing.js');

/*
 * Hot loading modules (dynamic caching)
 */
var hotload = require('./libs/hotload.js');

/*
 * JSON File handling
 */
var json = require('./libs/json.js');

/*
 * Event Dispatcher
 */
var dispatcher = require('./libs/dispatcher.js');

/*
 * Template Engine
 */
var template = require('./libs/template.js');

/*
 * Session handling
 */
var session = require('./libs/session.js');

/*
 * Multipart handling
 */
var multipart = require('./libs/multipart.js');

var http = require('http'),
    path = require('path'),
    fs   = require('fs');

const LOG_NOTHING = 0;
const LOG_CONSOLE = 1;
const LOG_LOGFILE = 2;

var _logLevel = 1;

var _logFile = '/tmp/nuage.log';

var _baseUrl = '';

var _serverConfig = null;

var writeLog = function(info) {
    if (_logLevel === LOG_CONSOLE) {
        console.log(info);
    }

    if (_logLevel === LOG_LOGFILE) {
        fs.writeFile(_logFile, info, function (err) {
          if (err) {
              console.log(err);
          }
        });
    }
}

var _sanityCheck = function(sanity, data) {
    for (var i = 0; i < sanity.length; i ++) {
        if (data[sanity[i].name] == undefined) {
            if (sanity[i].required) {
                throw {message: 'Parameter "' + sanity[i].name + '" expected.'}
            }
        } else {
            if (sanity[i].regexp != undefined) {
                if (null == data[sanity[i].name].match(sanity[i].regexp)) {
                    throw {message: 'Unexpected value for "' + sanity[i].name + '".'}
                }
            }
        }
    }
}

var _executeAction = function(actionPath, request, response, data) {
    console.log('Action Path: ' + actionPath);
    path.exists(actionPath, function(exists) {
        if (exists === true) {
            var action = require(actionPath);

            if (typeof action.sanity == 'function') {
                try {
                    _sanityCheck(action.sanity(), data);
                } catch (exception) {
                    response.writeHead(400);
                    response.end(exception.message);
                }
            }

            if (action.loginRequired() == true) {
                if (request.headers.cookie) {
                    var cookie = require('querystring').parse(
                        request.headers.cookie.replace(' ', ''),
                        ';',
                        '='
                    );
                    var user = session.getUserByHash(cookie.HASH);
                    if (user != null) {
                        action.execute(request, response, data, user);
                    } else {
                        action.executeDefault(request, response, data);
                    }
                } else {
                    action.executeDefault(request, response, data);
                }
            } else {
                action.execute(request, response, data);
            }
        } else {
            fs.readFile(__dirname + '/html/notfound.xhtml', 'utf-8', function(err, data){
                if (!err) {
                    response.end(data);
                } else {
                    writeLog(err);
                    response.writeHead(500, {'Content-Type': 'text/plain'});
                    response.end('Page not found\n');
                }
            });
        }
    });
}

/**
 * createServer
 *
 * creates a new Nuage - Server
 *
 * @param configFile Path to JSON-File with configuration
 *
 * @return void
 */
exports.createServer = function(configFile) {
    json.load(configFile, function(config){

        var adress  = config.server.adress;
        var port    = config.server.port;
        
        _logFile = (config.server.logfile !== undefined) ?
            config.server.logfile : _logFile;

        _baseUrl = adress;

        _serverConfig = config;

        http.createServer(function (request, response) {
            var route = routing.resolveUrl(request.url, config.routes);
            var actionPath = config.directories.application + route.action;

            switch (request.method) {
                case 'GET':
                    var data = route.params;
                    console.log(data);
                    _executeAction(actionPath, request, response, data);
                break;

                case 'POST':
                    multipart.handleRequest(request, function(postData) {
                        var data = route.params;
                        data.post = postData;
                        _executeAction(actionPath, request, response, data);
                    });
                break;

                default:
                    response.writeHead(403);
                    response.end('Method not alowed');
            }


        }).listen(port, adress);

        writeLog("Server running @" + adress + ':' + port);
    });
}

exports.getRoute = function(url) {
    return nuage.routing.resolveUrl(url, _serverConfig.routes);
}

exports.addRoute = function(route) {
    _sanityCheck(
        [
            {
                'name': 'name',
                'required': true,
                'pattern': /\w+/
            },
            {
                'name': 'pattern',
                'required': true
            },
            {
                'name': 'action',
                'required': true,
                'pattern': /\w+(\/w+)*/
            }
        ],
        route
    );
        
    _serverConfig.routes.push(route);
}

exports.setLogLevel = function(level) {
    _logLevel = level;
}

exports.setLogFile = function(filename) {
    logFile = filename;
}

exports.getBaseUrl = function() {
    return _baseUrl + ':' + _serverConfig.server.port;
}

exports.getDatabaseConfig = function() {
    return _serverConfig.database;
}

exports.json = json;
exports.routing = routing;
exports.hotload = hotload;
exports.dispatcher = dispatcher;
exports.template = template;
exports.log = writeLog;
exports.session = session;
exports.executeAction = _executeAction;