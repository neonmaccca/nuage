/*
 *  Nuage - Framework for Nodejs
 *
 *  Copyright (c) 2011 Stephan Bruny
 *
 *  This software is provided 'as-is', without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it freely,
 *  subject to the following restrictions:
 *
 *      The origin of this software must not be misrepresented;
 *      you must not claim that you wrote the original software.
 *      If you use this software in a product,
 *      an acknowledgment in the product documentation would be appreciated but is not required.
 *      Altered source versions must be plainly marked as such,
 *      and must not be misrepresented as being the original software.
 *      This notice may not be removed or altered from any source distribution.
 *
 */

AuthUser = function(name, timestamp, hash) {
    this.name = name;
    this.timestamp = timestamp;
    this.hash = hash;
}

AuthUser.prototype = {
    'name': '',
    'timestamp': 0,
    'expires': 0,
    'hash': '',
    data: {},

    setData: function(data) {
        this.data = data;
    },
    getData: function() {
        return this.data;
    },
    getName: function() {
        return this.name;
    },
    getHash: function() {
        return this.hash;
    },
    setTimeout: function(timeout) {
        this.timeout = timeout;
    },
    setHash: function(hash) {
        this.hash = hash;
    },
    setExpireDate: function(date) {
        this.expires = date;
    },
    getExpireDate: function() {
        return this.expires;
    }
}

var _timeout  = 3600000;

var _usersConfig = [];

var _authUsers = [];

var _isLoggedIn = function(username) {
    for (var i = 0; i < _authUsers.length; i++) {
        if (_authUsers[i].getName() == username) {
            return true;
        }
    }
    return false;
}

var _getAuthUser = function(username) {
    for (var i = 0; i < _authUsers.length; i++) {
        if (_authUsers[i].getName() == username) {
            return _authUser[i];
        }
    }
    return null;
}

var _getAuthUserByHash = function(hash) {
    for (var i = 0; i < _authUsers.length; i++) {
        if (_authUsers[i].getHash() == hash) {
            return _authUsers[i];
        }
    }
    return null;
}

var _removeAuthUser = function(username) {
    for (var i = 0; i < _authUsers.length; i++) {
        if (_authUsers[i].getName() == username) {
            _authUsers.splice(i, 1);
            break;
        }
    }
    return false;
}

/**
 * setUsers
 *
 * setting user definitions
 *
 * @param usersConfig array of {name: "", password: ""}
 *
 * @return void
 */
exports.setUsers = function(usersConfig)
{
    // assert(typeof usersConfig == 'Array');
    _usersConfig = usersConfig;
}

/**
 * setUsers
 *
 * setting user definitions
 * already logged-in user will be ignored
 *
 * @param username
 * @param password
 * @param hashtype type of hash key (sha1, md5, sha256, etc.)
 *
 * @return user object or null on error
 */
exports.login = function(username, password, hashtype) {
    var user = null;
    for (var i = 0; i < _usersConfig.length; i++) {
        user = _usersConfig[i];
        if (user.name == username && user.password == password) {
            var crypto = require('crypto');
            var hash   = crypto.createHash( (hashtype) ? hashtype : 'sha1');
            var now = Date.now();
            hash.update(now.toString());
            var hashString = hash.digest('hex');

            var authUser = new AuthUser(user.name, now, hashString);

            authUser.setExpireDate(now + _timeout);

            if (!_isLoggedIn(user.name)) {
                _authUsers.push(authUser);
                timers = require('timers');
                timers.setTimeout(
                    function() {
                        console.log('User "' + user.name +'" timed out and was logged out automatically');
                        _removeAuthUser(user.name);
                    },
                    _timeout
                );
            }

            return authUser;
        }
    }
    return null;
}

/**
 * logout
 *
 * loggin out user (without check for being logged in)
 *
 * @param username
 *
 * @return void
 */
exports.logout = function(username) {
    _removeAuthUser(username);
}

/**
 * isAuthUser
 *
 * Authentication of user with hash
 *
 * @param username
 * @param hash
 *
 * @return boolean
 */
exports.isAuthUser = function(username, hash) {
    var user = _getAuthUser(username);
    return hash == user.getHash();
}

exports.getUserByHash = function(hash) {
    return _getAuthUserByHash(hash);
}